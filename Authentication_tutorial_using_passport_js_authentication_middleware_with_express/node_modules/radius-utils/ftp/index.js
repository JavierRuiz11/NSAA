const fs = require("fs-extra");
const Client = require("ftp");
const readline = require("readline");
const progress = require("progress-stream");
const client = new Client();

const ftp = {};

ftp.connect = async (host, user, password) => {
  return new Promise((resolve, reject) => {
    client.on("ready", () => {
      resolve();
    });

    client.on("error", (err) => {
      reject(err);
    });

    client.connect({ host, user, password });
  });
};

ftp.list = async (directory) => {
  return new Promise((resolve, reject) => {
    client.list((err, list) => {
      if (err) reject(err);
      else resolve(list);
    });
  });
};

ftp.cwd = async (directory) => {
  return new Promise((resolve, reject) => {
    client.cwd(directory, (err) => {
      if (err) reject(err);
      else resolve();
    });
  });
};

ftp.upload = async (source, destination) => {
  return new Promise((resolve, reject) => {
    const fileName = source.replace(/^.*[\\\/]/, "");
    const destinationPath =
      destination !== undefined ? destination : `./${fileName}`;
    var stat = fs.statSync(source);
    var str = progress({ length: stat.size, time: 100 });
    var prevPercentage = -1;

    str.on("progress", (progress) => {
      const percentage = Math.round(progress.percentage);
      if (percentage !== prevPercentage) {
        readline.cursorTo(process.stdout, 0);
        process.stdout.write(`uploading: ${fileName} ${percentage}% `);
        prevPercentage = percentage;
      }
    });

    const stream = fs.createReadStream(source).pipe(str);

    client.put(stream, destinationPath, (err) => {
      console.log(" ");
      if (err) reject(err);
      else resolve();
    });
  });
};

ftp.delete = async (directory) => {
  return new Promise((resolve, reject) => {
    client.delete(directory, (err) => {
      if (err) reject(err);
      else resolve();
    });
  });
};

ftp.rmdir = async (directory) => {
  return new Promise((resolve, reject) => {
    client.rmdir(path, true, (err) => {
      if (err) reject(err);
      else resolve();
    });
  });
};

ftp.mkdir = async (directory) => {
  return new Promise((resolve, reject) => {
    client.mkdir(directory, true, (err) => {
      if (err) reject(err);
      else resolve();
    });
  });
};

ftp.end = () => {
  client.end();
};

module.exports = ftp;
